name: Orcid QA Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: string
        description: "Wordpress environment (STAGIN, PROD)"
        default: "STAGIN"
      postID:
        required: true
        type: string
        description: "The ID of the page to clone"
        default: "25163"

jobs:
  clone-post:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.commit-changes.outputs.should-run }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
         node-version: '18'

      - name: Install node dependencies
        run: npm install

      - name: Run clone and process script
        run: |
          if [ "${{ inputs.environment }}" == "PROD" ]; then
            python wordpress-cloning-main.py ${{ inputs.environment }} ${{ inputs.postID }} ${{ secrets.WORDPRESS_USERNAME }} ${{ secrets.WORDPRESS_PASSWORD }} --commit
          else
            python wordpress-cloning-main.py ${{ inputs.environment }} ${{ inputs.postID }} ${{ secrets.WORDPRESS_USERNAME }} ${{ secrets.WORDPRESS_PASSWORD }}
          fi

      - name: Debug output
        run: |
          echo "$Github_output file contents: " && cat "$GITHUB_OUTPUT"
          echo steps.commit-changes.outputs.should-run: ${{ steps.commit-changes.outputs.should-run }}
        env:
          GITHUB_OUTPUT: ${{ github.workspace }}/output.txt
        continue-on-error: true
        shell: bash
  
  release_prod_wordpress_new_version:
    runs-on: ubuntu-latest
    needs: clone-post
    if: inputs.environment== 'PROD' && needs.clone-post.outputs.should-run == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Exit if no relevant changes
        run: echo "Exiting because there are no changes in src" && exit 0

      - name: Get the current version tag
        id: get_version
        run: |
          git checkout main
          git pull
          TAG=$(git tag --sort=-version:refname | head -n 1)
          echo "Current version tag:" $TAG
          echo "version=${TAG}" >> "$GITHUB_OUTPUT"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.version }}
          MAJOR=$(echo $CURRENT_VERSION | cut -d'.' -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d'.' -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d'.' -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "New version: $NEW_VERSION"
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Create and push tag
        run: |
          NEW_TAG=${{ steps.new_version.outputs.new_version }}
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new_version.outputs.new_version }}
          release_name: Release ${{ steps.new_version.outputs.new_version }}
          draft: false
          prerelease: false
          
  upload_stagin_wordpress_to_s3:
    needs: clone-post
    runs-on: ubuntu-latest
    if: inputs.environment != 'PROD'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Get recent changes
        run: |
          git pull

      - name: Upload HTML to S3
        uses: reggionick/s3-deploy@v4
        with:
          folder: dist
          bucket: orcid-qa-public-page
          bucket-region: 'us-east-1'
          dist-id: 'E3AOMNP9201N9Z'
          invalidation: /
          delete-removed: true
          no-cache: true
          private: true
          files-to-include: '{.*/**,**}'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'

  upload_prod_wordpress_to_s3:
    needs: release_prod_wordpress_new_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Get recent changes
        run: |
          git pull

      - name: Upload HTML to S3
        uses: reggionick/s3-deploy@v4
        with:
          folder: dist
          bucket: orcid-qa-public-page
          bucket-region: 'us-east-1'
          dist-id: 'E3AOMNP9201N9Z'
          invalidation: /
          delete-removed: true
          no-cache: true
          private: true
          files-to-include: '{.*/**,**}'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'