name: Clone And QA Deploy WordPress Post

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: string
        description: "The deployment environment (QA, PROD)"
        default: "QA"
      postID:
        required: true
        type: string
        description: "The ID of the page to clone"
        default: "25163"

jobs:
  clone_post:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run cloning script
        run: python wordpress-cloning-script.py ${{ inputs.environment }} ${{ inputs.postID }} ${{ secrets.WORDPRESS_USERNAME }} ${{ secrets.WORDPRESS_PASSWORD }}

      - name: Configure git user
        run: |
          git config user.name 'GitHub Actions'
          git config user.email 'actions@github.com'

      - name: Commit and push changes
        run: |
          git add .
          # Check if there are any changes
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Cloned WordPress post ${{ github.event.inputs.postID }} for environment ${{ github.event.inputs.environment }}"
            git push

      - name: Get the current version tag
        id: get_version
        run: |
          TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Current version tag: $TAG"
          echo "::set-output name=version::${TAG}"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.version }}
          MAJOR=$(echo $CURRENT_VERSION | cut -d'.' -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d'.' -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d'.' -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "New version: $NEW_VERSION"
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Create and push tag
        run: |
          NEW_TAG=${{ steps.new_version.outputs.new_version }}
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new_version.outputs.new_version }}
          release_name: Release ${{ steps.new_version.outputs.new_version }}
          draft: false
          prerelease: false
          
  upload_to_s3:
    needs: clone_post
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Get recent changes
        run: |
          git pull

      - name: Upload HTML to S3
        uses: reggionick/s3-deploy@v4
        with:
          folder: dist
          bucket: orcid-qa-public-page
          bucket-region: 'us-east-1'
          dist-id: 'E3AOMNP9201N9Z'
          invalidation: /
          delete-removed: true
          no-cache: true
          private: true
          files-to-include: '{.*/**,**}'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'
  # clear_s3_bucket:
  #   needs: clone_post
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1

  #     - name: Empty S3 Bucket
  #       run: |
  #         aws s3 rm s3://orcid-qa-public-page --recursive

  # upload_to_s3:
  #   needs: clear_s3_bucket
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
        
  #     - name: Get recent changes
  #       run: |
  #         git pull

  #     - name: Upload HTML to S3
  #       uses: jakejarvis/s3-sync-action@master
  #       with:
  #         args: --follow-symlinks --delete
  #       env:
  #         AWS_S3_BUCKET: orcid-qa-public-page
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_REGION: 'us-east-1'  
  #         SOURCE_DIR: 'dist'

  # cloudfront_invalidation:
    # needs: upload_to_s3
    # runs-on: ubuntu-latest
    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v2

    #   - name: Configure AWS credentials
    #     uses: aws-actions/configure-aws-credentials@v1
    #     with:
    #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       aws-region: us-east-1 

    #   - name: Invalidate CloudFront cache
    #     run: |
    #       aws cloudfront create-invalidation --distribution-id E3AOMNP9201N9Z --paths "/*"